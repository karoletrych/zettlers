// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: commands.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Commands {

  /// <summary>Holder for reflection information generated from commands.proto</summary>
  public static partial class CommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb21tYW5kcy5wcm90bxIIY29tbWFuZHMiHAoEaW50MhIJCgF4GAEgASgF",
            "EgkKAXkYAiABKAUiXwoVTG9ja3N0ZXBVcGRhdGVSZXF1ZXN0EhYKDmxvY2tz",
            "dGVwVHVybklkGAEgASgFEi4KDXBsYXllckNvbW1hbmQYAiABKAsyFy5jb21t",
            "YW5kcy5QbGF5ZXJDb21tYW5kIs4BChZMb2Nrc3RlcFVwZGF0ZVJlc3BvbnNl",
            "EkwKDnBsYXllckNvbW1hbmRzGAEgAygLMjQuY29tbWFuZHMuTG9ja3N0ZXBV",
            "cGRhdGVSZXNwb25zZS5QbGF5ZXJDb21tYW5kc0VudHJ5EhYKDmxvY2tzdGVw",
            "VHVybklkGAIgASgFGk4KE1BsYXllckNvbW1hbmRzRW50cnkSCwoDa2V5GAEg",
            "ASgJEiYKBXZhbHVlGAIgASgLMhcuY29tbWFuZHMuUGxheWVyQ29tbWFuZDoC",
            "OAEiYgoUQnVpbGRCdWlsZGluZ0NvbW1hbmQSEgoKQnVpbGRpbmdJZBgBIAEo",
            "CRIUCgxCdWlsZGluZ1R5cGUYAiABKAUSIAoIUG9zaXRpb24YAyABKAsyDi5j",
            "b21tYW5kcy5pbnQyIgsKCU5vQ29tbWFuZCJmCg1QbGF5ZXJDb21tYW5kEiEK",
            "Am5jGAEgASgLMhMuY29tbWFuZHMuTm9Db21tYW5kSAASLQoDYmJjGAIgASgL",
            "Mh4uY29tbWFuZHMuQnVpbGRCdWlsZGluZ0NvbW1hbmRIAEIDCgFvYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.int2), global::Commands.int2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.LockstepUpdateRequest), global::Commands.LockstepUpdateRequest.Parser, new[]{ "LockstepTurnId", "PlayerCommand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.LockstepUpdateResponse), global::Commands.LockstepUpdateResponse.Parser, new[]{ "PlayerCommands", "LockstepTurnId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.BuildBuildingCommand), global::Commands.BuildBuildingCommand.Parser, new[]{ "BuildingId", "BuildingType", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.NoCommand), global::Commands.NoCommand.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Commands.PlayerCommand), global::Commands.PlayerCommand.Parser, new[]{ "Nc", "Bbc" }, new[]{ "O" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class int2 : pb::IMessage<int2> {
    private static readonly pb::MessageParser<int2> _parser = new pb::MessageParser<int2>(() => new int2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<int2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int2(int2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int2 Clone() {
      return new int2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as int2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(int2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(int2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockstepUpdateRequest : pb::IMessage<LockstepUpdateRequest> {
    private static readonly pb::MessageParser<LockstepUpdateRequest> _parser = new pb::MessageParser<LockstepUpdateRequest>(() => new LockstepUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockstepUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateRequest(LockstepUpdateRequest other) : this() {
      lockstepTurnId_ = other.lockstepTurnId_;
      playerCommand_ = other.playerCommand_ != null ? other.playerCommand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateRequest Clone() {
      return new LockstepUpdateRequest(this);
    }

    /// <summary>Field number for the "lockstepTurnId" field.</summary>
    public const int LockstepTurnIdFieldNumber = 1;
    private int lockstepTurnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockstepTurnId {
      get { return lockstepTurnId_; }
      set {
        lockstepTurnId_ = value;
      }
    }

    /// <summary>Field number for the "playerCommand" field.</summary>
    public const int PlayerCommandFieldNumber = 2;
    private global::Commands.PlayerCommand playerCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Commands.PlayerCommand PlayerCommand {
      get { return playerCommand_; }
      set {
        playerCommand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockstepUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockstepUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LockstepTurnId != other.LockstepTurnId) return false;
      if (!object.Equals(PlayerCommand, other.PlayerCommand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LockstepTurnId != 0) hash ^= LockstepTurnId.GetHashCode();
      if (playerCommand_ != null) hash ^= PlayerCommand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LockstepTurnId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LockstepTurnId);
      }
      if (playerCommand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LockstepTurnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockstepTurnId);
      }
      if (playerCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockstepUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.LockstepTurnId != 0) {
        LockstepTurnId = other.LockstepTurnId;
      }
      if (other.playerCommand_ != null) {
        if (playerCommand_ == null) {
          PlayerCommand = new global::Commands.PlayerCommand();
        }
        PlayerCommand.MergeFrom(other.PlayerCommand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LockstepTurnId = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerCommand_ == null) {
              PlayerCommand = new global::Commands.PlayerCommand();
            }
            input.ReadMessage(PlayerCommand);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockstepUpdateResponse : pb::IMessage<LockstepUpdateResponse> {
    private static readonly pb::MessageParser<LockstepUpdateResponse> _parser = new pb::MessageParser<LockstepUpdateResponse>(() => new LockstepUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockstepUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateResponse(LockstepUpdateResponse other) : this() {
      playerCommands_ = other.playerCommands_.Clone();
      lockstepTurnId_ = other.lockstepTurnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockstepUpdateResponse Clone() {
      return new LockstepUpdateResponse(this);
    }

    /// <summary>Field number for the "playerCommands" field.</summary>
    public const int PlayerCommandsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Commands.PlayerCommand>.Codec _map_playerCommands_codec
        = new pbc::MapField<string, global::Commands.PlayerCommand>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Commands.PlayerCommand.Parser), 10);
    private readonly pbc::MapField<string, global::Commands.PlayerCommand> playerCommands_ = new pbc::MapField<string, global::Commands.PlayerCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Commands.PlayerCommand> PlayerCommands {
      get { return playerCommands_; }
    }

    /// <summary>Field number for the "lockstepTurnId" field.</summary>
    public const int LockstepTurnIdFieldNumber = 2;
    private int lockstepTurnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockstepTurnId {
      get { return lockstepTurnId_; }
      set {
        lockstepTurnId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockstepUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockstepUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PlayerCommands.Equals(other.PlayerCommands)) return false;
      if (LockstepTurnId != other.LockstepTurnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PlayerCommands.GetHashCode();
      if (LockstepTurnId != 0) hash ^= LockstepTurnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerCommands_.WriteTo(output, _map_playerCommands_codec);
      if (LockstepTurnId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LockstepTurnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerCommands_.CalculateSize(_map_playerCommands_codec);
      if (LockstepTurnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockstepTurnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockstepUpdateResponse other) {
      if (other == null) {
        return;
      }
      playerCommands_.Add(other.playerCommands_);
      if (other.LockstepTurnId != 0) {
        LockstepTurnId = other.LockstepTurnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerCommands_.AddEntriesFrom(input, _map_playerCommands_codec);
            break;
          }
          case 16: {
            LockstepTurnId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildBuildingCommand : pb::IMessage<BuildBuildingCommand> {
    private static readonly pb::MessageParser<BuildBuildingCommand> _parser = new pb::MessageParser<BuildBuildingCommand>(() => new BuildBuildingCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildBuildingCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildBuildingCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildBuildingCommand(BuildBuildingCommand other) : this() {
      buildingId_ = other.buildingId_;
      buildingType_ = other.buildingType_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildBuildingCommand Clone() {
      return new BuildBuildingCommand(this);
    }

    /// <summary>Field number for the "BuildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private string buildingId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BuildingType" field.</summary>
    public const int BuildingTypeFieldNumber = 2;
    private int buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Commands.int2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Commands.int2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildBuildingCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildBuildingCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if (BuildingType != other.BuildingType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId.Length != 0) hash ^= BuildingId.GetHashCode();
      if (BuildingType != 0) hash ^= BuildingType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BuildingId);
      }
      if (BuildingType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildingType);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildingId);
      }
      if (BuildingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildBuildingCommand other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId.Length != 0) {
        BuildingId = other.BuildingId;
      }
      if (other.BuildingType != 0) {
        BuildingType = other.BuildingType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Commands.int2();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BuildingId = input.ReadString();
            break;
          }
          case 16: {
            BuildingType = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Commands.int2();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoCommand : pb::IMessage<NoCommand> {
    private static readonly pb::MessageParser<NoCommand> _parser = new pb::MessageParser<NoCommand>(() => new NoCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCommand(NoCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCommand Clone() {
      return new NoCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerCommand : pb::IMessage<PlayerCommand> {
    private static readonly pb::MessageParser<PlayerCommand> _parser = new pb::MessageParser<PlayerCommand>(() => new PlayerCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Commands.CommandsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommand(PlayerCommand other) : this() {
      switch (other.OCase) {
        case OOneofCase.Nc:
          Nc = other.Nc.Clone();
          break;
        case OOneofCase.Bbc:
          Bbc = other.Bbc.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCommand Clone() {
      return new PlayerCommand(this);
    }

    /// <summary>Field number for the "nc" field.</summary>
    public const int NcFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Commands.NoCommand Nc {
      get { return oCase_ == OOneofCase.Nc ? (global::Commands.NoCommand) o_ : null; }
      set {
        o_ = value;
        oCase_ = value == null ? OOneofCase.None : OOneofCase.Nc;
      }
    }

    /// <summary>Field number for the "bbc" field.</summary>
    public const int BbcFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Commands.BuildBuildingCommand Bbc {
      get { return oCase_ == OOneofCase.Bbc ? (global::Commands.BuildBuildingCommand) o_ : null; }
      set {
        o_ = value;
        oCase_ = value == null ? OOneofCase.None : OOneofCase.Bbc;
      }
    }

    private object o_;
    /// <summary>Enum of possible cases for the "o" oneof.</summary>
    public enum OOneofCase {
      None = 0,
      Nc = 1,
      Bbc = 2,
    }
    private OOneofCase oCase_ = OOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OOneofCase OCase {
      get { return oCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearO() {
      oCase_ = OOneofCase.None;
      o_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nc, other.Nc)) return false;
      if (!object.Equals(Bbc, other.Bbc)) return false;
      if (OCase != other.OCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oCase_ == OOneofCase.Nc) hash ^= Nc.GetHashCode();
      if (oCase_ == OOneofCase.Bbc) hash ^= Bbc.GetHashCode();
      hash ^= (int) oCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oCase_ == OOneofCase.Nc) {
        output.WriteRawTag(10);
        output.WriteMessage(Nc);
      }
      if (oCase_ == OOneofCase.Bbc) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oCase_ == OOneofCase.Nc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nc);
      }
      if (oCase_ == OOneofCase.Bbc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCommand other) {
      if (other == null) {
        return;
      }
      switch (other.OCase) {
        case OOneofCase.Nc:
          if (Nc == null) {
            Nc = new global::Commands.NoCommand();
          }
          Nc.MergeFrom(other.Nc);
          break;
        case OOneofCase.Bbc:
          if (Bbc == null) {
            Bbc = new global::Commands.BuildBuildingCommand();
          }
          Bbc.MergeFrom(other.Bbc);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Commands.NoCommand subBuilder = new global::Commands.NoCommand();
            if (oCase_ == OOneofCase.Nc) {
              subBuilder.MergeFrom(Nc);
            }
            input.ReadMessage(subBuilder);
            Nc = subBuilder;
            break;
          }
          case 18: {
            global::Commands.BuildBuildingCommand subBuilder = new global::Commands.BuildBuildingCommand();
            if (oCase_ == OOneofCase.Bbc) {
              subBuilder.MergeFrom(Bbc);
            }
            input.ReadMessage(subBuilder);
            Bbc = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
